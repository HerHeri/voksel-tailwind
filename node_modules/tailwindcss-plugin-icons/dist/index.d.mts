import * as tailwindcss_types_config from 'tailwindcss/types/config'
import { PluginAPI } from 'tailwindcss/types/config'

interface IconUrlOptions {
  /**
   * The left part of the top-left coordinate of the viewBox.
   * @default 0
   */
  readonly left?: number
  /**
   * The top part of the top-left coordinate of the viewBox.
   * @default 0
   */
  readonly top?: number
  /**
   * The width of the viewBox.
   */
  readonly width: number
  /**
   * The height of the viewBox.
   */
  readonly height: number
  /**
   * The body of the SVG.
   */
  readonly body: string
}
declare function iconUrl({
  left,
  top,
  width,
  height,
  body,
}: IconUrlOptions): string

declare const SCALE: unique symbol

interface CssRecordWithMaybeScale extends Record<string, unknown> {
  [SCALE]?: number
}

declare const Icons: {
  (options: Options): {
    handler: tailwindcss_types_config.PluginCreator
    config?: Partial<tailwindcss_types_config.Config> | undefined
  }
  __isOptionsFunction: true
}
type IconSetOptions = {
  /**
   * An object describing the selected icons with optional default CSS.
   */
  icons?: IconSetOptionsIcons
  /**
   * A default scale used for all selected icons.
   * @default 1
   */
  scale?: IconSetOptionsScale
  /**
   * The location of the icon source in Iconify JSON format. Can be any URI, local path, or module name.
   * @default "@iconify/json" or "@iconify-json/[name]"
   */
  location?: string
  /**
   * Choose to include every icon in the icon set.
   * @default false
   */
  includeAll?: boolean
  /**
   * A prefix for the generated CSS classes.
   */
  prefix?: IconSetOptionsPrefix
}
type IconSetOptionsIcons = Record<string, CssRecordWithMaybeScale>
type ScaleFactory = (iconName: string) => number
type IconSetOptionsScale = number | ScaleFactory
type IconSetOptionsPrefix = {
  /**
   * The prefix for mask icons.
   * @default "i-"
   */
  mask?: string
  /**
   * The prefix for background icons.
   * @default "bg-"
   */
  background?: string
}
type IconSetOptionsRecord = Record<string, IconSetOptions>
type Options = (pluginApi: PluginAPI) => IconSetOptionsRecord

export {
  type IconSetOptions,
  type IconSetOptionsIcons,
  type IconSetOptionsPrefix,
  type IconSetOptionsRecord,
  type IconSetOptionsScale,
  type IconUrlOptions,
  Icons,
  type Options,
  SCALE,
  type ScaleFactory,
  iconUrl,
}
