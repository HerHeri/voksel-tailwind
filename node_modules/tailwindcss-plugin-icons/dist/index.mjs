import 'crypto';

import child_process from 'child_process';
import fs from 'fs';
import path from 'path';
import { iconToDataUrl, toKebabCase, readJson, TailwindcssPluginIconsError, isUri, loadIconFromIconifyJson } from './chunks/shared.mjs';
export { iconUrl } from './chunks/shared.mjs';
import { SCALE, cache } from './chunks/state.cjs';
export { SCALE } from './chunks/state.cjs';
import flattenColorPalette from 'tailwindcss/lib/util/flattenColorPalette';
import plugin from 'tailwindcss/plugin';

const URL_VAR_NAME = "--tw-plugin-icons-url";
function getIconDimensions(icon, scale) {
  return {
    width: `${icon.width / icon.height * scale}em`,
    height: `${scale}em`
  };
}
function getIconCss(icon, cssDefaults) {
  const iconUrl = iconToDataUrl(icon);
  const iconDimensions = getIconDimensions(icon, cssDefaults[SCALE]);
  if (icon.mode === "mask") {
    return {
      [URL_VAR_NAME]: iconUrl,
      mask: `var(${URL_VAR_NAME}) no-repeat`,
      maskSize: "100% 100%",
      backgroundColor: "currentColor",
      ...iconDimensions,
      ...cssDefaults
    };
  }
  return {
    [URL_VAR_NAME]: iconUrl,
    background: `var(${URL_VAR_NAME}) no-repeat`,
    backgroundSize: "100% 100%",
    ...iconDimensions,
    ...cssDefaults
  };
}
function getIconCssAsColorFunction(icon, cssDefaults) {
  return (color) => {
    return {
      [URL_VAR_NAME]: iconToDataUrl(
        icon,
        icon.body.replace(/currentColor/g, color)
      ),
      background: `var(${URL_VAR_NAME}) no-repeat`,
      backgroundSize: "100% 100%",
      ...getIconDimensions(icon, cssDefaults[SCALE]),
      ...cssDefaults
    };
  };
}

function resolveIconSets(iconSetOptionsRecord, callback) {
  var _a;
  const locationsToFetch = [];
  const afterFetchCallbacks = [];
  for (const [iconSetName, iconSetOptions] of Object.entries(
    iconSetOptionsRecord
  )) {
    (_a = iconSetOptions.icons) != null ? _a : iconSetOptions.icons = {};
    const kebabCaseIconSetName = toKebabCase(iconSetName);
    if (!iconSetOptions.location) {
      try {
        const jsonPath = require.resolve(
          `@iconify-json/${kebabCaseIconSetName}/icons.json`
        );
        callback(
          kebabCaseIconSetName,
          iconSetOptions,
          readJson(jsonPath)
        );
        continue;
      } catch (e) {
        TailwindcssPluginIconsError.rethrowIfInstanceof(e);
      }
      try {
        const jsonPath = require.resolve(
          `@iconify/json/json/${kebabCaseIconSetName}.json`
        );
        callback(
          kebabCaseIconSetName,
          iconSetOptions,
          readJson(jsonPath)
        );
        continue;
      } catch (e) {
        TailwindcssPluginIconsError.rethrowIfInstanceof(e);
      }
      throw new TailwindcssPluginIconsError(
        `Icon set "${iconSetName}" not found. Please see if the name is correct or try installing it with "npm install @iconify-json/${kebabCaseIconSetName}"`
      );
    }
    if (isUri(iconSetOptions.location)) {
      if (cache.has(iconSetOptions.location)) {
        callback(
          kebabCaseIconSetName,
          iconSetOptions,
          cache.get(iconSetOptions.location)
        );
      } else {
        locationsToFetch.push(iconSetOptions.location);
        afterFetchCallbacks.push(() => {
          callback(
            kebabCaseIconSetName,
            iconSetOptions,
            cache.get(iconSetOptions.location)
          );
        });
      }
      continue;
    }
    let resolvedLocation;
    try {
      resolvedLocation = require.resolve(iconSetOptions.location);
    } catch {
      resolvedLocation = path.resolve(iconSetOptions.location);
    }
    if (!fs.existsSync(resolvedLocation)) {
      throw new TailwindcssPluginIconsError(
        `Failed to find icon set at location "${iconSetOptions.location}"`
      );
    }
    callback(
      kebabCaseIconSetName,
      iconSetOptions,
      readJson(resolvedLocation)
    );
    continue;
  }
  if (!locationsToFetch.length) {
    return;
  }
  child_process.execFileSync(
    "node",
    [path.resolve(__dirname, "fetch.mjs"), cache.cacheDir, ...locationsToFetch],
    {
      stdio: "pipe"
    }
  );
  afterFetchCallbacks.forEach((cb) => cb());
}
const addIconToComponents = (components, backgroundComponents) => ({
  iconifyJson,
  iconName,
  iconSetName,
  prefix,
  scale,
  cssDefaults = {}
}) => {
  var _a;
  const loadedIcon = loadIconFromIconifyJson(iconifyJson, iconName);
  Object.defineProperty(cssDefaults, SCALE, {
    value: (_a = cssDefaults[SCALE]) != null ? _a : typeof scale === "function" ? scale(iconName) : scale,
    enumerable: false,
    writable: false,
    configurable: false
  });
  if (loadedIcon.mode === "bg") {
    backgroundComponents[`${prefix.background}${iconSetName}-${loadedIcon.normalizedName}`] = getIconCssAsColorFunction(
      loadedIcon,
      cssDefaults
    );
  } else {
    components[`.${prefix.mask}${iconSetName}-${loadedIcon.normalizedName}`] = getIconCss(loadedIcon, cssDefaults);
  }
  return loadedIcon;
};
const Icons = plugin.withOptions((options) => (pluginApi) => {
  const components = {};
  const backgroundComponents = {};
  const addIcon = addIconToComponents(components, backgroundComponents);
  const onResolve = (iconSetName, {
    icons,
    includeAll,
    prefix: { mask = "i-", background = "bg-" } = {},
    scale = 1
  }, iconifyJson) => {
    if (includeAll) {
      Object.keys(iconifyJson.icons).forEach((iconName) => {
        addIcon({
          iconifyJson,
          iconName,
          iconSetName,
          scale,
          prefix: { mask, background }
        });
      });
      if (iconifyJson.aliases) {
        Object.keys(iconifyJson.aliases).forEach((iconName) => {
          addIcon({
            iconifyJson,
            iconName,
            iconSetName,
            scale,
            prefix: { mask, background }
          });
        });
      }
    }
    Object.entries(icons).forEach(([iconName, cssDefaults]) => {
      addIcon({
        iconifyJson,
        iconName,
        iconSetName,
        cssDefaults,
        scale,
        prefix: { mask, background }
      });
    });
  };
  try {
    resolveIconSets(options(pluginApi), onResolve);
  } catch (e) {
    if (e instanceof Error) {
      console.error("[TailwindcssPluginIcons]", e.message);
    }
    return;
  }
  pluginApi.addComponents(components);
  pluginApi.matchComponents(backgroundComponents, {
    values: flattenColorPalette(pluginApi.theme("colors")),
    type: ["color", "any"]
  });
});

export { Icons };
